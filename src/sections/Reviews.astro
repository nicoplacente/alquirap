---
import SectionContainer from "../components/SectionContainer.astro";
import Review from "../components/Review.astro";
import Title from "../components/Title.astro";
import { REVIEWS } from "../libs/reviews-constants.js";
---

<SectionContainer id="reviews" className="!px-0 sm:px-4">
  <Title>Rese√±as</Title>

  <div
    class="relative overflow-hidden [mask-image:linear-gradient(to_right,transparent_0%,black_10%,black_90%,transparent_100%)]"
  >
    <div
      id="slider-track"
      class="flex gap-6 select-none"
      style="will-change: transform; touch-action: none; cursor: grab;"
    >
      {REVIEWS.map((review) => <Review {...review} />)}
      {REVIEWS.map((review) => <Review {...review} />)}
    </div>
  </div>
</SectionContainer>

<script is:inline>
  const track = document.getElementById("slider-track");
  const slides = Array.from(track.children);
  const total = slides.length / 2;
  let slideWidth = slides[0].offsetWidth + 24;
  let contentWidth = slideWidth * total;

  let pos = 0;
  let dragging = false;
  let moved = false;
  let startX = 0;
  let lastX = 0;
  let speed = 0;
  let requestId;

  function animate() {
    if (!dragging) pos -= 1;

    if (pos <= -contentWidth) pos += contentWidth;
    if (pos > 0) pos -= contentWidth;

    track.style.transform = `translateX(${pos}px)`;
    requestId = requestAnimationFrame(animate);
  }

  requestId = requestAnimationFrame(animate);

  function onStart(e) {
    e.preventDefault();
    dragging = true;
    moved = false;
    cancelAnimationFrame(requestId);

    startX = e.pageX ?? e.clientX ?? e.touches?.[0]?.pageX ?? 0;
    lastX = startX;

    track.setPointerCapture(e.pointerId);
    track.style.cursor = "grabbing";
  }

  function onMove(e) {
    if (!dragging) return;

    const x = e.pageX ?? e.clientX ?? e.touches?.[0]?.pageX ?? 0;
    const delta = x - lastX;

    if (Math.abs(delta) > 0.5) {
      moved = true;
      pos += delta;
      track.style.transform = `translateX(${pos}px)`;
    }

    speed = delta;
    lastX = x;

    e.preventDefault();
  }

  function onEnd(e) {
    e.preventDefault();
    if (!dragging) return;
    dragging = false;
    track.releasePointerCapture(e.pointerId);
    speed = 0;
    track.style.cursor = "grab";
    requestId = requestAnimationFrame(animate);
  }

  track.addEventListener("pointerdown", onStart, { passive: false });
  track.addEventListener("pointermove", onMove, { passive: false });
  track.addEventListener("pointerup", onEnd);
  track.addEventListener("pointercancel", onEnd);
  track.addEventListener("lostpointercapture", onEnd);

  window.addEventListener("resize", () => {
    slideWidth = slides[0].offsetWidth + 24;
    contentWidth = slideWidth * total;
  });
</script>
